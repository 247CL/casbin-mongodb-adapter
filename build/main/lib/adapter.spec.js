"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-expression-statement no-implicit-dependencies
const ava_1 = __importDefault(require("ava"));
const casbin_1 = require("casbin");
const mongodb_memory_server_1 = require("mongodb-memory-server");
const adapter_1 = require("./adapter");
// Start MongoDB instance
const mongod = new mongodb_memory_server_1.MongoMemoryServer();
let adapter;
let e;
const m = (0, casbin_1.newModel)();
m.addDef('r', 'r', 'sub, obj, act');
m.addDef('p', 'p', 'sub, obj, act');
m.addDef('g', 'g', '_, _');
m.addDef('e', 'e', 'some(where (p.eft == allow))');
m.addDef('m', 'm', 'g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act');
ava_1.default.before('Setting up Casbin and Adapter', async () => {
    try {
        const uri = await mongod.getUri();
        adapter = await adapter_1.MongoAdapter.newAdapter({
            uri,
            collection: 'casbin',
            database: 'casbindb'
        });
        e = await (0, casbin_1.newEnforcer)(m, adapter);
    }
    catch (error) {
        throw new Error(error.message);
    }
});
(0, ava_1.default)('Missing Mongo URI', async (t) => {
    const error = await t.throwsAsync(adapter_1.MongoAdapter.newAdapter({
        // @ts-ignore
        uri: null,
        collection: 'casbin',
        database: 'casbindb'
    }));
    t.is(error.message, 'you must provide mongo URI to connect to!');
});
(0, ava_1.default)('Wrong Mongo Connection String', async (t) => {
    const error = await t.throwsAsync(adapter_1.MongoAdapter.newAdapter({
        uri: 'wrong',
        collection: 'casbin',
        database: 'casbindb'
    }));
    t.is(error.message, 'Invalid connection string');
});
(0, ava_1.default)('Open adapter connection', async (t) => {
    await t.notThrowsAsync(adapter.open());
});
(0, ava_1.default)('Creates DB indexes', async (t) => {
    await t.notThrowsAsync(adapter.createDBIndex());
});
(0, ava_1.default)('Add policy', t => {
    t.truthy(e.addPolicy('alice', 'data3', 'read'));
});
(0, ava_1.default)('Save the policy back to DB', async (t) => {
    t.true(await e.savePolicy());
});
(0, ava_1.default)('Load policy', async (t) => {
    t.deepEqual(await e.loadPolicy(), undefined);
});
(0, ava_1.default)('Check alice permission', async (t) => {
    t.falsy(await e.enforce('alice', 'data1', 'read'));
});
(0, ava_1.default)('Save policy against adapter', async (t) => {
    t.true(await adapter.savePolicy(m));
});
(0, ava_1.default)('Add policy against adapter', async (t) => {
    await t.notThrowsAsync(adapter.addPolicy('alice', 'data5', ['read']));
});
(0, ava_1.default)('Add policies successfully', async (t) => {
    await t.notThrowsAsync(adapter.addPolicies('', 'john', [['create'], ['write']]));
});
(0, ava_1.default)('Removes policies successfully', async (t) => {
    await t.notThrowsAsync(adapter.removePolicies('', 'john', [['create'], ['write']]));
});
(0, ava_1.default)('Remove filtered policy against adapter', async (t) => {
    await t.notThrowsAsync(adapter.removeFilteredPolicy('alice', 'data5', 0, 'read'));
});
(0, ava_1.default)('Remove policy against adapter', async (t) => {
    await t.notThrowsAsync(adapter.removePolicy('alice', 'data5', ['read']));
});
ava_1.default.after('Close connection', async (t) => {
    t.notThrows(async () => adapter.close());
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9hZGFwdGVyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrRUFBa0U7QUFDbEUsOENBQXVCO0FBQ3ZCLG1DQUF5RDtBQUN6RCxpRUFBMEQ7QUFDMUQsdUNBQXlDO0FBRXpDLHlCQUF5QjtBQUN6QixNQUFNLE1BQU0sR0FBRyxJQUFJLHlDQUFpQixFQUFFLENBQUM7QUFFdkMsSUFBSSxPQUFxQixDQUFDO0FBQzFCLElBQUksQ0FBVyxDQUFDO0FBRWhCLE1BQU0sQ0FBQyxHQUFHLElBQUEsaUJBQVEsR0FBRSxDQUFDO0FBQ3JCLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUNwQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDcEMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSw4QkFBOEIsQ0FBQyxDQUFDO0FBQ25ELENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxxREFBcUQsQ0FBQyxDQUFDO0FBRTFFLGFBQUksQ0FBQyxNQUFNLENBQUMsK0JBQStCLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDdEQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxHQUFHLEdBQUcsTUFBTSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbEMsT0FBTyxHQUFHLE1BQU0sc0JBQVksQ0FBQyxVQUFVLENBQUM7WUFDdEMsR0FBRztZQUNILFVBQVUsRUFBRSxRQUFRO1lBQ3BCLFFBQVEsRUFBRSxVQUFVO1NBQ3JCLENBQUMsQ0FBQztRQUNILENBQUMsR0FBRyxNQUFNLElBQUEsb0JB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